DELIMITER //
CREATE PROCEDURE sp_ListarAutores()
BEGIN
    SELECT * FROM Autor;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_LivrosPorCategoria(IN categoria_nome VARCHAR(100))
BEGIN
    SELECT Livro.Titulo
    FROM Livro
    INNER JOIN Categoria ON Livro.Categoria_ID = Categoria.Categoria_ID
    WHERE Categoria.Nome = categoria_nome;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_ContarLivrosPorCategoria(IN categoria_nome VARCHAR(100), OUT total INT)
BEGIN
    SELECT COUNT(*) INTO total
    FROM Livro
    INNER JOIN Categoria ON Livro.Categoria_ID = Categoria.Categoria_ID
    WHERE Categoria.Nome = categoria_nome;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_VerificarLivrosCategoria(IN categoria_nome VARCHAR(100), OUT possui_livros BOOLEAN)
BEGIN
    DECLARE total INT;
    SELECT COUNT(*) INTO total
    FROM Livro
    INNER JOIN Categoria ON Livro.Categoria_ID = Categoria.Categoria_ID
    WHERE Categoria.Nome = categoria_nome;
    SET possui_livros = (total > 0);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_LivrosAteAno(IN ano_publicacao INT)
BEGIN
    SELECT * FROM Livro
    WHERE Ano_Publicacao <= ano_publicacao;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE sp_TitulosPorCategoria(IN categoria_nome VARCHAR(100))
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE livro_titulo VARCHAR(255);
    DECLARE cur CURSOR FOR
        SELECT Livro.Titulo
        FROM Livro
        INNER JOIN Categoria ON Livro.Categoria_ID = Categoria.Categoria_ID
        WHERE Categoria.Nome = categoria_nome;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    OPEN cur;
    read_loop: LOOP
        FETCH cur INTO livro_titulo;
        IF done THEN
            LEAVE read_loop;
        END IF;
        SELECT livro_titulo;
    END LOOP;
    CLOSE cur;
END //
DELIMITER ;

// 7
DELIMITER //
CREATE PROCEDURE sp_AdicionarLivro(IN titulo_livro VARCHAR(255), IN editora_id INT, IN ano_publicacao INT, IN numero_paginas INT, IN categoria_id INT)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;
    START TRANSACTION;
    INSERT INTO Livro (Titulo, Editora_ID, Ano_Publicacao, Numero_Paginas, Categoria_ID)
    VALUES (titulo_livro, editora_id, ano_publicacao, numero_paginas, categoria_id);
    COMMIT;
END //
DELIMITER ;

// 8

DELIMITER //
CREATE PROCEDURE sp_AutorMaisAntigo(OUT autor_mais_antigo_nome VARCHAR(255))
BEGIN
    SELECT CONCAT(Nome, ' ', Sobrenome)
    INTO autor_mais_antigo_nome
    FROM Autor
    ORDER BY Data_Nascimento ASC
    LIMIT 1;
END //
DELIMITER ;


-- 9

DELIMITER //
CREATE PROCEDURE sp_AutorMaisAntigo(OUT autor_mais_antigo_nome VARCHAR(255))
BEGIN
    DECLARE autor_id INT;
    DECLARE autor_nome VARCHAR(255);
    DECLARE autor_sobrenome VARCHAR(255);

    DECLARE cur CURSOR FOR
        SELECT Autor_ID, Nome, Sobrenome
        FROM Autor
        ORDER BY Data_Nascimento ASC
        LIMIT 1;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET @no_more_rows = TRUE;

    SET @no_more_rows = FALSE;

    START TRANSACTION;

    OPEN cur;

    read_loop: LOOP
        FETCH cur INTO autor_id, autor_nome, autor_sobrenome;
        IF @no_more_rows THEN
            LEAVE read_loop;
        END IF;
    END LOOP;

    CLOSE cur;

    COMMIT;

    SET autor_mais_antigo_nome = CONCAT(autor_nome, ' ', autor_sobrenome);
END //
DELIMITER ;

-- 10

DELIMITER //
CREATE PROCEDURE sp_LivrosESeusAutores()
BEGIN
    SELECT Livro.Titulo, CONCAT(Autor.Nome, ' ', Autor.Sobrenome) AS Autor
    FROM Livro
    INNER JOIN Autor_Livro ON Livro.Livro_ID = Autor_Livro.Livro_ID
    INNER JOIN Autor ON Autor_Livro.Autor_ID = Autor.Autor_ID;
END //
DELIMITER ;
